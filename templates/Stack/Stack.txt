package com.besaba.revonline.primitivecollections.stack;

import com.besaba.revonline.primitivecollections.function.{{consumer}};
import com.besaba.revonline.primitivecollections.iterables.{{iterable}};
import com.besaba.revonline.primitivecollections.iterables.iterators.{{iterator}};
import com.besaba.revonline.primitivecollections.list.linkedlist.{{upperCaseType}}LinkedList;

/**
 * @author Marco
 * @since 1.0
 */
public class {{className}} implements {{iterable}}, Cloneable {
    private {{upperCaseType}}LinkedList linkedList;

    private {{className}}({{upperCaseType}}LinkedList list) {
        this.linkedList = list;
    }

    private {{className}}() {
        linkedList = {{upperCaseType}}LinkedList.empty();
    }

    public static {{className}} with({{type}}... values) {
        return new {{className}}({{upperCaseType}}LinkedList.with(values));
    }

    public static {{className}} from({{className}} stack) {
        return stack.clone();
    }

    public static {{className}} empty() {
        return new {{className}}();
    }

    public void push({{type}} value) {
        linkedList.addFirst(value);
    }

    public {{type}} pop() {
        return linkedList.removeFirst();
    }

    public {{type}} peek() {
        return linkedList.getFirst();
    }

    public int size() {
        return linkedList.size();
    }

    public void clear() {
        linkedList.clear();
    }

    public boolean isEmpty() {
        return linkedList.isEmpty();
    }

    public {{type}}[] asArray() {
        return linkedList.asArray();
    }

    public void forEach({{consumer}} consumer) {
        linkedList.forEach(consumer);
    }

    @Override
    public {{iterator}} iterator() {
        return linkedList.iterator();
    }

    @Override
    public String toString() {
        return linkedList.toString();
    }

    @Override
    public {{className}} clone() {
        {{className}} intStack;

        try {
            intStack = ({{className}}) super.clone();
        } catch (CloneNotSupportedException e) {
            throw new AssertionError();
        }

        intStack.linkedList = linkedList.clone();
        return intStack;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }

        if (obj.getClass() != this.getClass()) {
            return false;
        }

        if (obj instanceof {{className}}) {
            {{className}} objList = ({{className}}) obj;
            return objList.linkedList.equals(this.linkedList);
        }

        return false;
    }
}
